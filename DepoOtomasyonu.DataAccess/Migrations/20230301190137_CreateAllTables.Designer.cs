// <auto-generated />
using System;
using DepoOtomasyonu.DataAccess.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DepoOtomasyonu.DataAccess.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230301190137_CreateAllTables")]
    partial class CreateAllTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 64)
                .HasAnnotation("ProductVersion", "5.0.0");

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.CardModel", b =>
                {
                    b.Property<int>("CardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("CardId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Cards");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.CategoryModel", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.CustomerModel", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("CustomerCompany")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CustomerPassword")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.OrdersModel", b =>
                {
                    b.Property<int>("OrdeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrdeId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("ProductId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.ProductModel", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int?>("CustomerModelCustomerId")
                        .HasColumnType("int");

                    b.Property<string>("ProductCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ProductCount")
                        .HasColumnType("int");

                    b.Property<double>("ProductPrice")
                        .HasColumnType("double");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CustomerModelCustomerId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.UserModel", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserPassworrd")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.CardModel", b =>
                {
                    b.HasOne("DepoOtomasyonu.Model.Models.CustomerModel", "CustomerModel")
                        .WithMany("CardModels")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoOtomasyonu.Model.Models.ProductModel", "ProductModel")
                        .WithMany("CardModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerModel");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.OrdersModel", b =>
                {
                    b.HasOne("DepoOtomasyonu.Model.Models.CustomerModel", "CustomerModel")
                        .WithMany("OrdersModels")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoOtomasyonu.Model.Models.ProductModel", "ProductModel")
                        .WithMany("OrdersModels")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CustomerModel");

                    b.Navigation("ProductModel");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.ProductModel", b =>
                {
                    b.HasOne("DepoOtomasyonu.Model.Models.CategoryModel", "CategoryModel")
                        .WithMany("ProductModels")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DepoOtomasyonu.Model.Models.CustomerModel", null)
                        .WithMany("ProductModels")
                        .HasForeignKey("CustomerModelCustomerId");

                    b.Navigation("CategoryModel");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.CategoryModel", b =>
                {
                    b.Navigation("ProductModels");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.CustomerModel", b =>
                {
                    b.Navigation("CardModels");

                    b.Navigation("OrdersModels");

                    b.Navigation("ProductModels");
                });

            modelBuilder.Entity("DepoOtomasyonu.Model.Models.ProductModel", b =>
                {
                    b.Navigation("CardModels");

                    b.Navigation("OrdersModels");
                });
#pragma warning restore 612, 618
        }
    }
}
